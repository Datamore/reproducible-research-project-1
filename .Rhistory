#-------------------------------------------------------------------------------
# 1. Merge the training and the test sets to create one data set.
## step 1: download zip file from website
if(!file.exists("./data")) dir.create("./data")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile = "./data/projectData_getCleanData.zip")
## step 2: unzip data
listZip <- unzip("./data/projectData_getCleanData.zip", exdir = "./data")
## step 3: load data into R
train.x <- read.table("./data/UCI HAR Dataset/train/X_train.txt")
train.y <- read.table("./data/UCI HAR Dataset/train/y_train.txt")
train.subject <- read.table("./data/UCI HAR Dataset/train/subject_train.txt")
test.x <- read.table("./data/UCI HAR Dataset/test/X_test.txt")
test.y <- read.table("./data/UCI HAR Dataset/test/y_test.txt")
test.subject <- read.table("./data/UCI HAR Dataset/test/subject_test.txt")
## step 4: merge train and test data
trainData <- cbind(train.subject, train.y, train.x)
testData <- cbind(test.subject, test.y, test.x)
fullData <- rbind(trainData, testData)
#-------------------------------------------------------------------------------
# 2. Extract only the measurements on the mean and standard deviation for each measurement.
## step 1: load feature name into R
featureName <- read.table("./data/UCI HAR Dataset/features.txt", stringsAsFactors = FALSE)[,2]
## step 2:  extract mean and standard deviation of each measurements
featureIndex <- grep(("mean\\(\\)|std\\(\\)"), featureName)
finalData <- fullData[, c(1, 2, featureIndex+2)]
colnames(finalData) <- c("subject", "activity", featureName[featureIndex])
#-------------------------------------------------------------------------------
# 3. Uses descriptive activity names to name the activities in the data set
## step 1: load activity data into R
activityName <- read.table("./data/UCI HAR Dataset/activity_labels.txt")
## step 2: replace 1 to 6 with activity names
finalData$activity <- factor(finalData$activity, levels = activityName[,1], labels = activityName[,2])
#-------------------------------------------------------------------------------
# 4. Appropriately labels the data set with descriptive variable names.
names(finalData) <- gsub("\\()", "", names(finalData))
names(finalData) <- gsub("^t", "time", names(finalData))
names(finalData) <- gsub("^f", "frequence", names(finalData))
names(finalData) <- gsub("-mean", "Mean", names(finalData))
names(finalData) <- gsub("-std", "Std", names(finalData))
#-------------------------------------------------------------------------------
# 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
library(dplyr)
groupData <- finalData %>%
group_by(subject, activity) %>%
summarise_each(funs(mean))
## write.table(groupData, "./Getting_and_Cleaning_data_Project/MeanData.txt", row.names = FALSE)
write.table(groupData, "./MeanData.txt", row.names = FALSE)
#Load the data:
amd <- read.csv("./activity/activity.csv", stringsAsFactors = FALSE)
#Converting the “date” variable to a Date classe and the “interval” variable to a factor:
activity$date <- as.Date(activity$date, "%Y-%m-%d") str(activity)
#Creating a data frame for each day's steps
steps <- aggregate(steps ~ date, data = activity, sum)
#Adding column names
colnames(steps) <- c("date", "steps")
#Making a histogram of the total number of steps taken each day:
hist(as.numeric(steps$steps), breaks = 20, col = "blue", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Mean
mean(steps$steps)
#Median
median(steps$steps)
#Calculating the average
steps_interval <- aggregate(activity$steps, by=list(interval=activity$interval), FUN=mean)
#Adding columns names
colnames(steps_interval) <- c("interval", "average_steps")
#ploting the average daily activity pattern
plot(as.integer(levels(steps_interval$interval)), steps_interval$average_steps, type="l",xlab = "Interval", ylab = "Average Number of Steps", main = "Average Daily Activity Pattern", col ="blue")
#The maximum number of average steps
max_steps <- max(steps_interval$average_steps) max_steps
#The 5-minute interval containing the maximum number of steps
intervale_max_steps<-steps_interval[which.max(steps_interval$average_steps),]$interval intervale_max_steps
#Finding the missing values
sum(is.na(as.character(activity$steps))) sum(is.na(as.character(activity$date))) sum(is.na(as.character(activity$interval)))
NA_index <- which(is.na(as.character(activity$steps))) complete_data <- activity
#Imputing missing values using the mean for that 5-minute interval
complete_data[NA_index, ]$steps<-unlist(lapply(NA_index, FUN=function(NA_index){ steps_interval[activity[NA_index,]$interval==steps_interval$interval,]$average_steps }))
#Creating a data frame with the steps taken for each day
steps_eachday_complete <- aggregate(steps ~ date, data = complete_data, sum)
#Adding column names
colnames(steps_each_day_complete) <- c("date", "steps")
#Making the histogram
hist(as.numeric(steps_eachday_complete$steps), breaks = 20, col = "green", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Creating a factor to store the weekdays
complete_data$day <- as.factor(weekdays(complete_data$date))
#Creating a logical variable "is_weekday"
complete_data$is_weekday <- ifelse(!(complete_data$day %in% c("Saturday","Sunday")), TRUE, FALSE)
#Calculating the average steps for weekdays
weekdays_data <- complete_data[complete_data$is_weekday,] steps_interval_weekdays <- aggregate(weekdays_data$steps, by=list(interval=weekdays_data$interval), FUN=mean)
#Calculating the average number of steps for weekends
weekends_data <- complete_data[!complete_data$is_weekday,] steps_interval_weekends <- aggregate(weekends_data$steps, by=list(interval=weekends_data$interval), FUN=mean)
#Adding columns names
colnames(steps_interval_weekdays) <- c("interval", "average_steps") colnames(steps_interval_weekends) <- c("interval", "average_steps")
#Adding a column for "day"
steps_interval_weekdays$day <- "Weekday" steps_interval_weekends$day <- "Weekend"
#Merging the two togather
week_data <- rbind(steps_interval_weekends, steps_interval_weekdays)
#Converting the day variabke to a factor
week_data$day <- as.factor(week_data$day)
#Making the plot
library(lattice) xyplot(average_steps ~ interval | day, data = week_data, layout = c(1,2), type ="l", ylab="Number of Steps")
#Load the data:
setwd("E:\OneDrive\Coursera\Exploratory Data Analysis with R\Reproducible-Research---Peer-Graded-Assignment-Course-Project-1-master\activity")
amd <- read.csv("./activity/activity.csv", stringsAsFactors = FALSE)
#Converting the “date” variable to a Date classe and the “interval” variable to a factor:
activity$date <- as.Date(activity$date, "%Y-%m-%d") str(activity)
#Creating a data frame for each day's steps
steps <- aggregate(steps ~ date, data = activity, sum)
#Adding column names
colnames(steps) <- c("date", "steps")
#Making a histogram of the total number of steps taken each day:
hist(as.numeric(steps$steps), breaks = 20, col = "blue", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Mean
mean(steps$steps)
#Median
median(steps$steps)
#Calculating the average
steps_interval <- aggregate(activity$steps, by=list(interval=activity$interval), FUN=mean)
#Adding columns names
colnames(steps_interval) <- c("interval", "average_steps")
#ploting the average daily activity pattern
plot(as.integer(levels(steps_interval$interval)), steps_interval$average_steps, type="l",xlab = "Interval", ylab = "Average Number of Steps", main = "Average Daily Activity Pattern", col ="blue")
#The maximum number of average steps
max_steps <- max(steps_interval$average_steps) max_steps
#The 5-minute interval containing the maximum number of steps
intervale_max_steps<-steps_interval[which.max(steps_interval$average_steps),]$interval intervale_max_steps
#Finding the missing values
sum(is.na(as.character(activity$steps))) sum(is.na(as.character(activity$date))) sum(is.na(as.character(activity$interval)))
NA_index <- which(is.na(as.character(activity$steps))) complete_data <- activity
#Imputing missing values using the mean for that 5-minute interval
complete_data[NA_index, ]$steps<-unlist(lapply(NA_index, FUN=function(NA_index){ steps_interval[activity[NA_index,]$interval==steps_interval$interval,]$average_steps }))
#Creating a data frame with the steps taken for each day
steps_eachday_complete <- aggregate(steps ~ date, data = complete_data, sum)
#Adding column names
colnames(steps_each_day_complete) <- c("date", "steps")
#Making the histogram
hist(as.numeric(steps_eachday_complete$steps), breaks = 20, col = "green", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Creating a factor to store the weekdays
complete_data$day <- as.factor(weekdays(complete_data$date))
#Creating a logical variable "is_weekday"
complete_data$is_weekday <- ifelse(!(complete_data$day %in% c("Saturday","Sunday")), TRUE, FALSE)
#Calculating the average steps for weekdays
weekdays_data <- complete_data[complete_data$is_weekday,] steps_interval_weekdays <- aggregate(weekdays_data$steps, by=list(interval=weekdays_data$interval), FUN=mean)
#Calculating the average number of steps for weekends
weekends_data <- complete_data[!complete_data$is_weekday,] steps_interval_weekends <- aggregate(weekends_data$steps, by=list(interval=weekends_data$interval), FUN=mean)
#Adding columns names
colnames(steps_interval_weekdays) <- c("interval", "average_steps") colnames(steps_interval_weekends) <- c("interval", "average_steps")
#Adding a column for "day"
steps_interval_weekdays$day <- "Weekday" steps_interval_weekends$day <- "Weekend"
#Merging the two togather
week_data <- rbind(steps_interval_weekends, steps_interval_weekdays)
#Converting the day variabke to a factor
week_data$day <- as.factor(week_data$day)
#Making the plot
library(lattice) xyplot(average_steps ~ interval | day, data = week_data, layout = c(1,2), type ="l", ylab="Number of Steps")
setwd("E:\OneDrive\Coursera\Exploratory Data Analysis with R\Reproducible-Research---Peer-Graded-Assignment-Course-Project-1-master\activity")
#Load the data:
setwd("E:/OneDrive/Coursera/Exploratory Data Analysis with R/Reproducible-Research---Peer-Graded-Assignment-Course-Project-1-master")
#Load the data:
setwd("E:/OneDrive/Coursera/Exploratory Data Analysis with R/Reproducible-Research---Peer-Graded-Assignment-Course-Project-1-master")
amd <- read.csv("./activity/activity.csv", stringsAsFactors = FALSE)
#Converting the “date” variable to a Date classe and the “interval” variable to a factor:
activity$date <- as.Date(activity$date, "%Y-%m-%d") str(activity)
#Creating a data frame for each day's steps
steps <- aggregate(steps ~ date, data = activity, sum)
#Adding column names
colnames(steps) <- c("date", "steps")
#Making a histogram of the total number of steps taken each day:
hist(as.numeric(steps$steps), breaks = 20, col = "blue", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Mean
mean(steps$steps)
#Median
median(steps$steps)
#Calculating the average
steps_interval <- aggregate(activity$steps, by=list(interval=activity$interval), FUN=mean)
#Adding columns names
colnames(steps_interval) <- c("interval", "average_steps")
#ploting the average daily activity pattern
plot(as.integer(levels(steps_interval$interval)), steps_interval$average_steps, type="l",xlab = "Interval", ylab = "Average Number of Steps", main = "Average Daily Activity Pattern", col ="blue")
#The maximum number of average steps
max_steps <- max(steps_interval$average_steps) max_steps
#The 5-minute interval containing the maximum number of steps
intervale_max_steps<-steps_interval[which.max(steps_interval$average_steps),]$interval intervale_max_steps
#Finding the missing values
sum(is.na(as.character(activity$steps))) sum(is.na(as.character(activity$date))) sum(is.na(as.character(activity$interval)))
NA_index <- which(is.na(as.character(activity$steps))) complete_data <- activity
#Imputing missing values using the mean for that 5-minute interval
complete_data[NA_index, ]$steps<-unlist(lapply(NA_index, FUN=function(NA_index){ steps_interval[activity[NA_index,]$interval==steps_interval$interval,]$average_steps }))
#Creating a data frame with the steps taken for each day
steps_eachday_complete <- aggregate(steps ~ date, data = complete_data, sum)
#Adding column names
colnames(steps_each_day_complete) <- c("date", "steps")
#Making the histogram
hist(as.numeric(steps_eachday_complete$steps), breaks = 20, col = "green", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Creating a factor to store the weekdays
complete_data$day <- as.factor(weekdays(complete_data$date))
#Creating a logical variable "is_weekday"
complete_data$is_weekday <- ifelse(!(complete_data$day %in% c("Saturday","Sunday")), TRUE, FALSE)
#Calculating the average steps for weekdays
weekdays_data <- complete_data[complete_data$is_weekday,] steps_interval_weekdays <- aggregate(weekdays_data$steps, by=list(interval=weekdays_data$interval), FUN=mean)
#Calculating the average number of steps for weekends
weekends_data <- complete_data[!complete_data$is_weekday,] steps_interval_weekends <- aggregate(weekends_data$steps, by=list(interval=weekends_data$interval), FUN=mean)
#Adding columns names
colnames(steps_interval_weekdays) <- c("interval", "average_steps") colnames(steps_interval_weekends) <- c("interval", "average_steps")
#Adding a column for "day"
steps_interval_weekdays$day <- "Weekday" steps_interval_weekends$day <- "Weekend"
#Merging the two togather
week_data <- rbind(steps_interval_weekends, steps_interval_weekdays)
#Converting the day variabke to a factor
week_data$day <- as.factor(week_data$day)
#Making the plot
library(lattice) xyplot(average_steps ~ interval | day, data = week_data, layout = c(1,2), type ="l", ylab="Number of Steps")
#Load the data:
setwd("E:/OneDrive/Coursera/Exploratory Data Analysis with R/Reproducible-Research---Peer-Graded-Assignment-Course-Project-1-master")
amd <- read.csv("./activity/activity.csv", stringsAsFactors = FALSE)
#Converting the “date” variable to a Date classe and the “interval” variable to a factor:
activity$date <- as.Date(activity$date, "%Y-%m-%d") str(activity)
#Creating a data frame for each day's steps
steps <- aggregate(steps ~ date, data = activity, sum)
#Adding column names
colnames(steps) <- c("date", "steps")
#Making a histogram of the total number of steps taken each day:
hist(as.numeric(steps$steps), breaks = 20, col = "blue", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Mean
mean(steps$steps)
#Median
median(steps$steps)
#Calculating the average
steps_interval <- aggregate(activity$steps, by=list(interval=activity$interval), FUN=mean)
#Adding columns names
colnames(steps_interval) <- c("interval", "average_steps")
#ploting the average daily activity pattern
plot(as.integer(levels(steps_interval$interval)), steps_interval$average_steps, type="l",xlab = "Interval", ylab = "Average Number of Steps", main = "Average Daily Activity Pattern", col ="blue")
#The maximum number of average steps
max_steps <- max(steps_interval$average_steps) max_steps
#The 5-minute interval containing the maximum number of steps
intervale_max_steps<-steps_interval[which.max(steps_interval$average_steps),]$interval intervale_max_steps
#Finding the missing values
sum(is.na(as.character(activity$steps))) sum(is.na(as.character(activity$date))) sum(is.na(as.character(activity$interval)))
NA_index <- which(is.na(as.character(activity$steps))) complete_data <- activity
#Imputing missing values using the mean for that 5-minute interval
complete_data[NA_index, ]$steps<-unlist(lapply(NA_index, FUN=function(NA_index){ steps_interval[activity[NA_index,]$interval==steps_interval$interval,]$average_steps }))
#Creating a data frame with the steps taken for each day
steps_eachday_complete <- aggregate(steps ~ date, data = complete_data, sum)
#Adding column names
colnames(steps_each_day_complete) <- c("date", "steps")
#Making the histogram
hist(as.numeric(steps_eachday_complete$steps), breaks = 20, col = "green", xlab = "Number of Steps", main= "Histogram of the total number of steps taken each day")
#Creating a factor to store the weekdays
complete_data$day <- as.factor(weekdays(complete_data$date))
#Creating a logical variable "is_weekday"
complete_data$is_weekday <- ifelse(!(complete_data$day %in% c("Saturday","Sunday")), TRUE, FALSE)
#Calculating the average steps for weekdays
weekdays_data <- complete_data[complete_data$is_weekday,] steps_interval_weekdays <- aggregate(weekdays_data$steps, by=list(interval=weekdays_data$interval), FUN=mean)
#Calculating the average number of steps for weekends
weekends_data <- complete_data[!complete_data$is_weekday,] steps_interval_weekends <- aggregate(weekends_data$steps, by=list(interval=weekends_data$interval), FUN=mean)
#Adding columns names
colnames(steps_interval_weekdays) <- c("interval", "average_steps") colnames(steps_interval_weekends) <- c("interval", "average_steps")
#Adding a column for "day"
steps_interval_weekdays$day <- "Weekday" steps_interval_weekends$day <- "Weekend"
#Merging the two togather
week_data <- rbind(steps_interval_weekends, steps_interval_weekdays)
#Converting the day variabke to a factor
week_data$day <- as.factor(week_data$day)
#Making the plot
library(lattice) xyplot(average_steps ~ interval | day, data = week_data, layout = c(1,2), type ="l", ylab="Number of Steps")
#Load the data:
setwd("E:/OneDrive/Coursera/Exploratory Data Analysis with R/Reproducible-Research---Peer-Graded-Assignment-Course-Project-1-master")
amd <- read.csv("./activity/activity.csv", stringsAsFactors = FALSE)
#Converting the “date” variable to a Date classe and the “interval” variable to a factor:
activity$date <- as.Date(activity$date, "%Y-%m-%d") str(activity)
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv")
## Loading and preprocessing the data
```{r loaddata}
unzip(zipfile="repdata_data_activity.zip")
data <- read.csv("activity.csv")
```
#Load the data:
setwd("E:/OneDrive/Coursera/Exploratory Data Analysis with R/Reproducible-Research---Peer-Graded-Assignment-Course-Project-1-master")# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r loaddata}
unzip(zipfile="repdata_data_activity.zip")
data <- read.csv("activity.csv")
```
#Load the data:
setwd("E:/OneDrive/Coursera/Exploratory Data Analysis with R/Reproducible-Research---Peer-Graded-Assignment-Course-Project-1-master")# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r loaddata}
unzip(zipfile="repdata_data_activity.zip")
data <- read.csv("activity.csv")
```
## What is mean total number of steps taken per day?
```{r}
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
```
#Load the data:
setwd("E:/OneDrive/Coursera/Exploratory Data Analysis with R/Reproducible-Research---Peer-Graded-Assignment-Course-Project-1-master")# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r loaddata}
## unzip(zipfile="repdata_data_activity.zip")
data <- read.csv("activity.csv")
```
## What is mean total number of steps taken per day?
```{r}
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
```
## What is the average daily activity pattern?
```{r}
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
```
On average across all the days in the dataset, the 5-minute interval contains
the maximum number of steps?
```{r}
averages[which.max(averages$steps),]
```
## Imputing missing values
There are many days/intervals where there are missing values (coded as `NA`). The presence of missing days may introduce bias into some calculations or summaries of the data.
```{r how_many_missing}
missing <- is.na(data$steps)
# How many missing
table(missing)
```
All of the missing values are filled in with mean value for that 5-minute
interval.
```{r}
# Replace each missing value with the mean value of its 5-minute interval
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
```
Now, using the filled data set, let's make a histogram of the total number of steps taken each day and calculate the mean and median total number of steps.
```{r}
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps)
median(total.steps)
```
Mean and median values are higher after imputing missing data. The reason is
that in the original data, there are some days with `steps` values `NA` for
any `interval`. The total number of steps taken in such days are set to 0s by
default. However, after replacing missing `steps` values with the mean `steps`
of associated `interval` value, these 0 values are removed from the histogram
of total number of steps taken each day.
## Are there differences in activity patterns between weekdays and weekends?
First, let's find the day of the week for each measurement in the dataset. In
this part, we use the dataset with the filled-in values.
```{r}
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=weekday.or.weekend)
```
Now, let's make a panel plot containing plots of average number of steps taken
on weekdays and weekends.
```{r}
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
```
#Load the data:
setwd("E:/OneDrive/Coursera/Exploratory Data Analysis with R/Reproducible-Research---Peer-Graded-Assignment-Course-Project-1-master")# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r loaddata}
## unzip(zipfile="repdata_data_activity.zip")
data <- read.csv("activity.csv")
```
## What is mean total number of steps taken per day?
```{r}
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
```
## unzip(zipfile="repdata_data_activity.zip")
data <- read.csv("activity.csv")
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
## unzip(zipfile="repdata_data_activity.zip")
data <- read.csv("activity.csv")
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
averages[which.max(averages$steps),]
missing <- is.na(data$steps)
# How many missing
table(missing)
## unzip(zipfile="repdata_data_activity.zip")
data <- read.csv("activity.csv")
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
averages[which.max(averages$steps),]
missing <- is.na(data$steps)
# How many missing
table(missing)
# Replace each missing value with the mean value of its 5-minute interval
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps)
median(total.steps)
## unzip(zipfile="repdata_data_activity.zip")
data <- read.csv("activity.csv")
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
averages[which.max(averages$steps),]
missing <- is.na(data$steps)
# How many missing
table(missing)
# Replace each missing value with the mean value of its 5-minute interval
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps)
median(total.steps)
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=weekday.or.weekend)
